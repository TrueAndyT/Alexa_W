# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import services_pb2 as services__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in services_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class LoggerServiceStub(object):
    """Logger Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.WriteApp = channel.unary_unary(
                '/alexa.LoggerService/WriteApp',
                request_serializer=services__pb2.AppLogRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.NewDialog = channel.unary_unary(
                '/alexa.LoggerService/NewDialog',
                request_serializer=services__pb2.NewDialogRequest.SerializeToString,
                response_deserializer=services__pb2.DialogResponse.FromString,
                _registered_method=True)
        self.WriteDialog = channel.unary_unary(
                '/alexa.LoggerService/WriteDialog',
                request_serializer=services__pb2.DialogLogRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)


class LoggerServiceServicer(object):
    """Logger Service
    """

    def WriteApp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewDialog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteDialog(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'WriteApp': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteApp,
                    request_deserializer=services__pb2.AppLogRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'NewDialog': grpc.unary_unary_rpc_method_handler(
                    servicer.NewDialog,
                    request_deserializer=services__pb2.NewDialogRequest.FromString,
                    response_serializer=services__pb2.DialogResponse.SerializeToString,
            ),
            'WriteDialog': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteDialog,
                    request_deserializer=services__pb2.DialogLogRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.LoggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.LoggerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoggerService(object):
    """Logger Service
    """

    @staticmethod
    def WriteApp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoggerService/WriteApp',
            services__pb2.AppLogRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewDialog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoggerService/NewDialog',
            services__pb2.NewDialogRequest.SerializeToString,
            services__pb2.DialogResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def WriteDialog(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoggerService/WriteDialog',
            services__pb2.DialogLogRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TtsServiceStub(object):
    """TTS Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Speak = channel.unary_unary(
                '/alexa.TtsService/Speak',
                request_serializer=services__pb2.SpeakRequest.SerializeToString,
                response_deserializer=services__pb2.SpeakResponse.FromString,
                _registered_method=True)
        self.SpeakStream = channel.stream_unary(
                '/alexa.TtsService/SpeakStream',
                request_serializer=services__pb2.LlmChunk.SerializeToString,
                response_deserializer=services__pb2.SpeakResponse.FromString,
                _registered_method=True)
        self.PlaybackEvents = channel.unary_stream(
                '/alexa.TtsService/PlaybackEvents',
                request_serializer=services__pb2.DialogRef.SerializeToString,
                response_deserializer=services__pb2.PlaybackEvent.FromString,
                _registered_method=True)


class TtsServiceServicer(object):
    """TTS Service
    """

    def Speak(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SpeakStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlaybackEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TtsServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Speak': grpc.unary_unary_rpc_method_handler(
                    servicer.Speak,
                    request_deserializer=services__pb2.SpeakRequest.FromString,
                    response_serializer=services__pb2.SpeakResponse.SerializeToString,
            ),
            'SpeakStream': grpc.stream_unary_rpc_method_handler(
                    servicer.SpeakStream,
                    request_deserializer=services__pb2.LlmChunk.FromString,
                    response_serializer=services__pb2.SpeakResponse.SerializeToString,
            ),
            'PlaybackEvents': grpc.unary_stream_rpc_method_handler(
                    servicer.PlaybackEvents,
                    request_deserializer=services__pb2.DialogRef.FromString,
                    response_serializer=services__pb2.PlaybackEvent.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.TtsService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.TtsService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TtsService(object):
    """TTS Service
    """

    @staticmethod
    def Speak(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.TtsService/Speak',
            services__pb2.SpeakRequest.SerializeToString,
            services__pb2.SpeakResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SpeakStream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(
            request_iterator,
            target,
            '/alexa.TtsService/SpeakStream',
            services__pb2.LlmChunk.SerializeToString,
            services__pb2.SpeakResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def PlaybackEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/alexa.TtsService/PlaybackEvents',
            services__pb2.DialogRef.SerializeToString,
            services__pb2.PlaybackEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LlmServiceStub(object):
    """LLM Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Complete = channel.unary_stream(
                '/alexa.LlmService/Complete',
                request_serializer=services__pb2.CompleteRequest.SerializeToString,
                response_deserializer=services__pb2.CompleteResponse.FromString,
                _registered_method=True)


class LlmServiceServicer(object):
    """LLM Service
    """

    def Complete(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LlmServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Complete': grpc.unary_stream_rpc_method_handler(
                    servicer.Complete,
                    request_deserializer=services__pb2.CompleteRequest.FromString,
                    response_serializer=services__pb2.CompleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.LlmService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.LlmService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LlmService(object):
    """LLM Service
    """

    @staticmethod
    def Complete(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/alexa.LlmService/Complete',
            services__pb2.CompleteRequest.SerializeToString,
            services__pb2.CompleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class SttServiceStub(object):
    """STT Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Start = channel.unary_unary(
                '/alexa.SttService/Start',
                request_serializer=services__pb2.StartRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.Stop = channel.unary_unary(
                '/alexa.SttService/Stop',
                request_serializer=services__pb2.StopRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.Results = channel.unary_stream(
                '/alexa.SttService/Results',
                request_serializer=services__pb2.DialogRef.SerializeToString,
                response_deserializer=services__pb2.SttResult.FromString,
                _registered_method=True)


class SttServiceServicer(object):
    """STT Service
    """

    def Start(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Stop(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Results(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SttServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Start': grpc.unary_unary_rpc_method_handler(
                    servicer.Start,
                    request_deserializer=services__pb2.StartRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'Stop': grpc.unary_unary_rpc_method_handler(
                    servicer.Stop,
                    request_deserializer=services__pb2.StopRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'Results': grpc.unary_stream_rpc_method_handler(
                    servicer.Results,
                    request_deserializer=services__pb2.DialogRef.FromString,
                    response_serializer=services__pb2.SttResult.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.SttService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.SttService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class SttService(object):
    """STT Service
    """

    @staticmethod
    def Start(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.SttService/Start',
            services__pb2.StartRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Stop(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.SttService/Stop',
            services__pb2.StopRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Results(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/alexa.SttService/Results',
            services__pb2.DialogRef.SerializeToString,
            services__pb2.SttResult.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class KwdServiceStub(object):
    """KWD Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Events = channel.unary_stream(
                '/alexa.KwdService/Events',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.WakeEvent.FromString,
                _registered_method=True)
        self.Enable = channel.unary_unary(
                '/alexa.KwdService/Enable',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.Disable = channel.unary_unary(
                '/alexa.KwdService/Disable',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)


class KwdServiceServicer(object):
    """KWD Service
    """

    def Events(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Enable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Disable(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_KwdServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Events': grpc.unary_stream_rpc_method_handler(
                    servicer.Events,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.WakeEvent.SerializeToString,
            ),
            'Enable': grpc.unary_unary_rpc_method_handler(
                    servicer.Enable,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'Disable': grpc.unary_unary_rpc_method_handler(
                    servicer.Disable,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.KwdService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.KwdService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class KwdService(object):
    """KWD Service
    """

    @staticmethod
    def Events(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/alexa.KwdService/Events',
            services__pb2.Empty.SerializeToString,
            services__pb2.WakeEvent.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Enable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.KwdService/Enable',
            services__pb2.Empty.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Disable(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.KwdService/Disable',
            services__pb2.Empty.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class LoaderServiceStub(object):
    """Loader Service
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StartService = channel.unary_unary(
                '/alexa.LoaderService/StartService',
                request_serializer=services__pb2.ServiceRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.StopService = channel.unary_unary(
                '/alexa.LoaderService/StopService',
                request_serializer=services__pb2.ServiceRequest.SerializeToString,
                response_deserializer=services__pb2.Status.FromString,
                _registered_method=True)
        self.GetPids = channel.unary_unary(
                '/alexa.LoaderService/GetPids',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.PidsResponse.FromString,
                _registered_method=True)
        self.GetStatus = channel.unary_unary(
                '/alexa.LoaderService/GetStatus',
                request_serializer=services__pb2.Empty.SerializeToString,
                response_deserializer=services__pb2.SystemStatus.FromString,
                _registered_method=True)


class LoaderServiceServicer(object):
    """Loader Service
    """

    def StartService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StopService(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetPids(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_LoaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'StartService': grpc.unary_unary_rpc_method_handler(
                    servicer.StartService,
                    request_deserializer=services__pb2.ServiceRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'StopService': grpc.unary_unary_rpc_method_handler(
                    servicer.StopService,
                    request_deserializer=services__pb2.ServiceRequest.FromString,
                    response_serializer=services__pb2.Status.SerializeToString,
            ),
            'GetPids': grpc.unary_unary_rpc_method_handler(
                    servicer.GetPids,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.PidsResponse.SerializeToString,
            ),
            'GetStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStatus,
                    request_deserializer=services__pb2.Empty.FromString,
                    response_serializer=services__pb2.SystemStatus.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'alexa.LoaderService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('alexa.LoaderService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class LoaderService(object):
    """Loader Service
    """

    @staticmethod
    def StartService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoaderService/StartService',
            services__pb2.ServiceRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StopService(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoaderService/StopService',
            services__pb2.ServiceRequest.SerializeToString,
            services__pb2.Status.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetPids(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoaderService/GetPids',
            services__pb2.Empty.SerializeToString,
            services__pb2.PidsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/alexa.LoaderService/GetStatus',
            services__pb2.Empty.SerializeToString,
            services__pb2.SystemStatus.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
